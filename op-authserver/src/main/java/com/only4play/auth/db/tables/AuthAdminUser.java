/*
 * This file is generated by jOOQ.
 */
package com.only4play.auth.db.tables;


import com.only4play.auth.db.Authserver;
import com.only4play.auth.db.Indexes;
import com.only4play.auth.db.Keys;
import com.only4play.auth.db.tables.records.AuthAdminUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthAdminUser extends TableImpl<AuthAdminUserRecord> {

    private static final long serialVersionUID = 1629306552;

    /**
     * The reference instance of <code>authserver.auth_admin_user</code>
     */
    public static final AuthAdminUser AUTH_ADMIN_USER = new AuthAdminUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthAdminUserRecord> getRecordType() {
        return AuthAdminUserRecord.class;
    }

    /**
     * The column <code>authserver.auth_admin_user.id</code>.
     */
    public final TableField<AuthAdminUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>authserver.auth_admin_user.create_time</code>.
     */
    public final TableField<AuthAdminUserRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_admin_user.update_time</code>.
     */
    public final TableField<AuthAdminUserRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_admin_user.username</code>.
     */
    public final TableField<AuthAdminUserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>authserver.auth_admin_user.phone</code>.
     */
    public final TableField<AuthAdminUserRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>authserver.auth_admin_user.password</code>.
     */
    public final TableField<AuthAdminUserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>authserver.auth_admin_user.depart_id</code>.
     */
    public final TableField<AuthAdminUserRecord, Long> DEPART_ID = createField(DSL.name("depart_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>authserver.auth_admin_user.depart_name</code>.
     */
    public final TableField<AuthAdminUserRecord, String> DEPART_NAME = createField(DSL.name("depart_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>authserver.auth_admin_user.valid_status</code>.
     */
    public final TableField<AuthAdminUserRecord, String> VALID_STATUS = createField(DSL.name("valid_status"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>authserver.auth_admin_user.version</code>.
     */
    public final TableField<AuthAdminUserRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>authserver.auth_admin_user</code> table reference
     */
    public AuthAdminUser() {
        this(DSL.name("auth_admin_user"), null);
    }

    /**
     * Create an aliased <code>authserver.auth_admin_user</code> table reference
     */
    public AuthAdminUser(String alias) {
        this(DSL.name(alias), AUTH_ADMIN_USER);
    }

    /**
     * Create an aliased <code>authserver.auth_admin_user</code> table reference
     */
    public AuthAdminUser(Name alias) {
        this(alias, AUTH_ADMIN_USER);
    }

    private AuthAdminUser(Name alias, Table<AuthAdminUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthAdminUser(Name alias, Table<AuthAdminUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AuthAdminUser(Table<O> child, ForeignKey<O, AuthAdminUserRecord> key) {
        super(child, key, AUTH_ADMIN_USER);
    }

    @Override
    public Schema getSchema() {
        return Authserver.AUTHSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTH_ADMIN_USER_PRIMARY);
    }

    @Override
    public Identity<AuthAdminUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUTH_ADMIN_USER;
    }

    @Override
    public UniqueKey<AuthAdminUserRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_ADMIN_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuthAdminUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthAdminUserRecord>>asList(Keys.KEY_AUTH_ADMIN_USER_PRIMARY);
    }

    @Override
    public AuthAdminUser as(String alias) {
        return new AuthAdminUser(DSL.name(alias), this);
    }

    @Override
    public AuthAdminUser as(Name alias) {
        return new AuthAdminUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthAdminUser rename(String name) {
        return new AuthAdminUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthAdminUser rename(Name name) {
        return new AuthAdminUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Timestamp, Timestamp, String, String, String, Long, String, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
