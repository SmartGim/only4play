/*
 * This file is generated by jOOQ.
 */
package com.only4play.auth.db.tables;


import com.only4play.auth.db.Authserver;
import com.only4play.auth.db.Indexes;
import com.only4play.auth.db.Keys;
import com.only4play.auth.db.tables.records.AuthRoleResourceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthRoleResource extends TableImpl<AuthRoleResourceRecord> {

    private static final long serialVersionUID = 164450847;

    /**
     * The reference instance of <code>authserver.auth_role_resource</code>
     */
    public static final AuthRoleResource AUTH_ROLE_RESOURCE = new AuthRoleResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthRoleResourceRecord> getRecordType() {
        return AuthRoleResourceRecord.class;
    }

    /**
     * The column <code>authserver.auth_role_resource.id</code>.
     */
    public final TableField<AuthRoleResourceRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>authserver.auth_role_resource.created_at</code>.
     */
    public final TableField<AuthRoleResourceRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_role_resource.updated_at</code>.
     */
    public final TableField<AuthRoleResourceRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_role_resource.version</code>.
     */
    public final TableField<AuthRoleResourceRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>authserver.auth_role_resource.resource_id</code>. 资源Id
     */
    public final TableField<AuthRoleResourceRecord, Long> RESOURCE_ID = createField(DSL.name("resource_id"), org.jooq.impl.SQLDataType.BIGINT, this, "资源Id");

    /**
     * The column <code>authserver.auth_role_resource.role_id</code>. 角色id
     */
    public final TableField<AuthRoleResourceRecord, Long> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINT, this, "角色id");

    /**
     * Create a <code>authserver.auth_role_resource</code> table reference
     */
    public AuthRoleResource() {
        this(DSL.name("auth_role_resource"), null);
    }

    /**
     * Create an aliased <code>authserver.auth_role_resource</code> table reference
     */
    public AuthRoleResource(String alias) {
        this(DSL.name(alias), AUTH_ROLE_RESOURCE);
    }

    /**
     * Create an aliased <code>authserver.auth_role_resource</code> table reference
     */
    public AuthRoleResource(Name alias) {
        this(alias, AUTH_ROLE_RESOURCE);
    }

    private AuthRoleResource(Name alias, Table<AuthRoleResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthRoleResource(Name alias, Table<AuthRoleResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AuthRoleResource(Table<O> child, ForeignKey<O, AuthRoleResourceRecord> key) {
        super(child, key, AUTH_ROLE_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return Authserver.AUTHSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTH_ROLE_RESOURCE_PRIMARY);
    }

    @Override
    public Identity<AuthRoleResourceRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUTH_ROLE_RESOURCE;
    }

    @Override
    public UniqueKey<AuthRoleResourceRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_ROLE_RESOURCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuthRoleResourceRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthRoleResourceRecord>>asList(Keys.KEY_AUTH_ROLE_RESOURCE_PRIMARY);
    }

    @Override
    public AuthRoleResource as(String alias) {
        return new AuthRoleResource(DSL.name(alias), this);
    }

    @Override
    public AuthRoleResource as(Name alias) {
        return new AuthRoleResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthRoleResource rename(String name) {
        return new AuthRoleResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthRoleResource rename(Name name) {
        return new AuthRoleResource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Integer, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
