/*
 * This file is generated by jOOQ.
 */
package com.only4play.auth.db.tables;


import com.only4play.auth.db.Authserver;
import com.only4play.auth.db.Indexes;
import com.only4play.auth.db.Keys;
import com.only4play.auth.db.tables.records.AuthSysUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthSysUser extends TableImpl<AuthSysUserRecord> {

    private static final long serialVersionUID = -2123259436;

    /**
     * The reference instance of <code>authserver.auth_sys_user</code>
     */
    public static final AuthSysUser AUTH_SYS_USER = new AuthSysUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthSysUserRecord> getRecordType() {
        return AuthSysUserRecord.class;
    }

    /**
     * The column <code>authserver.auth_sys_user.id</code>.
     */
    public final TableField<AuthSysUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>authserver.auth_sys_user.created_at</code>.
     */
    public final TableField<AuthSysUserRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_sys_user.updated_at</code>.
     */
    public final TableField<AuthSysUserRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>authserver.auth_sys_user.version</code>.
     */
    public final TableField<AuthSysUserRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>authserver.auth_sys_user.depart_id</code>. 部门id
     */
    public final TableField<AuthSysUserRecord, Long> DEPART_ID = createField(DSL.name("depart_id"), org.jooq.impl.SQLDataType.BIGINT, this, "部门id");

    /**
     * The column <code>authserver.auth_sys_user.depart_name</code>. 部门名称
     */
    public final TableField<AuthSysUserRecord, String> DEPART_NAME = createField(DSL.name("depart_name"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "部门名称");

    /**
     * The column <code>authserver.auth_sys_user.password</code>. 密码
     */
    public final TableField<AuthSysUserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "密码");

    /**
     * The column <code>authserver.auth_sys_user.phone</code>. 手机号
     */
    public final TableField<AuthSysUserRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.CHAR(11), this, "手机号");

    /**
     * The column <code>authserver.auth_sys_user.real_name</code>. 真实姓名
     */
    public final TableField<AuthSysUserRecord, String> REAL_NAME = createField(DSL.name("real_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "真实姓名");

    /**
     * The column <code>authserver.auth_sys_user.username</code>. 用户名
     */
    public final TableField<AuthSysUserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "用户名");

    /**
     * The column <code>authserver.auth_sys_user.valid_status</code>. 是否删除
     */
    public final TableField<AuthSysUserRecord, Byte> VALID_STATUS = createField(DSL.name("valid_status"), org.jooq.impl.SQLDataType.TINYINT, this, "是否删除");

    /**
     * Create a <code>authserver.auth_sys_user</code> table reference
     */
    public AuthSysUser() {
        this(DSL.name("auth_sys_user"), null);
    }

    /**
     * Create an aliased <code>authserver.auth_sys_user</code> table reference
     */
    public AuthSysUser(String alias) {
        this(DSL.name(alias), AUTH_SYS_USER);
    }

    /**
     * Create an aliased <code>authserver.auth_sys_user</code> table reference
     */
    public AuthSysUser(Name alias) {
        this(alias, AUTH_SYS_USER);
    }

    private AuthSysUser(Name alias, Table<AuthSysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthSysUser(Name alias, Table<AuthSysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AuthSysUser(Table<O> child, ForeignKey<O, AuthSysUserRecord> key) {
        super(child, key, AUTH_SYS_USER);
    }

    @Override
    public Schema getSchema() {
        return Authserver.AUTHSERVER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTH_SYS_USER_PRIMARY);
    }

    @Override
    public Identity<AuthSysUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUTH_SYS_USER;
    }

    @Override
    public UniqueKey<AuthSysUserRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_SYS_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuthSysUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthSysUserRecord>>asList(Keys.KEY_AUTH_SYS_USER_PRIMARY);
    }

    @Override
    public AuthSysUser as(String alias) {
        return new AuthSysUser(DSL.name(alias), this);
    }

    @Override
    public AuthSysUser as(Name alias) {
        return new AuthSysUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthSysUser rename(String name) {
        return new AuthSysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthSysUser rename(Name name) {
        return new AuthSysUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, Integer, Long, String, String, String, String, String, Byte> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
